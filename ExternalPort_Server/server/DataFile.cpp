//******************************************************************
// 
//  Generated by e*ORB IDL to C++ Translator
//  
//  File name: DataFile.cpp
//  Source: DataFile.idl
//  Generated: Fri Feb 05 11:36:55 2021
//  eORB C++ V2.1.9
//  
//******************************************************************

#include "DataFile.h"



void 
Data::ProcessedData_stub::pushProcessedData (const ::CF::OctetSeq& pkt EORB_ENV_ARGN)
{
   static const EORB::OpMeta _md_ ("pushProcessedData", 0, 1164843457u, 18u, 1u, 0u, 0u);
   EORB::Codec::ParamPut _in_[1] =
   {
      { CORBA::_tc_OctetSeq, (CF::OctetSeq*) &pkt, CORBA::PARAM_IN }
   };

   invoke_request (_md_, _in_, 0 EORB_ENV_VARN);
}

Data::ProcessedData_ptr Data::ProcessedData::_duplicate (Data::ProcessedData_ptr p)
{
   if (p) p->m_count++;
   return p;
}

CORBA::Boolean Data::ProcessedData::_is_a (const char * _id)
{
   if (strcmp (_id, this->_repository_id ()) == 0)
   {
      return true;
   }

   return false;
}

Data::ProcessedData_ptr Data::ProcessedData::_narrow (CORBA::Object_ptr p EORB_ENV_ARGN)
{
   Data::ProcessedData_ptr result = 0;
   if (p && p->_is_a (_repository_id () EORB_ENV_VARN))
   {
      result = new ProcessedData_stub (p);
   }
   return result;
}

Data::ProcessedData_ptr Data::ProcessedData::_unchecked_narrow (CORBA::Object_ptr p)
{
   Data::ProcessedData_ptr result = 0;
   result = new ProcessedData_stub (p);
   return result;
}

void Data::ProcessedData::_assert_stub (ProcessedData_ptr & obj )
{
   if (CORBA::is_nil (obj)) obj = new ProcessedData_stub ();
}

Data::ProcessedData_stub::ProcessedData_stub (IOP::IOR_ptr ior) :
   CORBA::Object (ior)
{
}

Data::ProcessedData_stub::ProcessedData_stub (CORBA::Object_ptr p) :
   CORBA::Object (*p)
{
}


void 
Data::OpenData_stub::pushOpenData (const ::CF::OctetSeq& pkt EORB_ENV_ARGN)
{
   static const EORB::OpMeta _md_ ("pushOpenData", 0, 1634541055u, 13u, 1u, 0u, 0u);
   EORB::Codec::ParamPut _in_[1] =
   {
      { CORBA::_tc_OctetSeq, (CF::OctetSeq*) &pkt, CORBA::PARAM_IN }
   };

   invoke_request (_md_, _in_, 0 EORB_ENV_VARN);
}

Data::OpenData_ptr Data::OpenData::_duplicate (Data::OpenData_ptr p)
{
   if (p) p->m_count++;
   return p;
}

CORBA::Boolean Data::OpenData::_is_a (const char * _id)
{
   if (strcmp (_id, this->_repository_id ()) == 0)
   {
      return true;
   }

   return false;
}

Data::OpenData_ptr Data::OpenData::_narrow (CORBA::Object_ptr p EORB_ENV_ARGN)
{
   Data::OpenData_ptr result = 0;
   if (p && p->_is_a (_repository_id () EORB_ENV_VARN))
   {
      result = new OpenData_stub (p);
   }
   return result;
}

Data::OpenData_ptr Data::OpenData::_unchecked_narrow (CORBA::Object_ptr p)
{
   Data::OpenData_ptr result = 0;
   result = new OpenData_stub (p);
   return result;
}

void Data::OpenData::_assert_stub (OpenData_ptr & obj )
{
   if (CORBA::is_nil (obj)) obj = new OpenData_stub ();
}

Data::OpenData_stub::OpenData_stub (IOP::IOR_ptr ior) :
   CORBA::Object (ior)
{
}

Data::OpenData_stub::OpenData_stub (CORBA::Object_ptr p) :
   CORBA::Object (*p)
{
}


void 
Data::EncryptedData_stub::pushEncryptedData (const ::CF::OctetSeq& pkt EORB_ENV_ARGN)
{
   static const EORB::OpMeta _md_ ("pushEncryptedData", 0, 1958866893u, 18u, 1u, 0u, 0u);
   EORB::Codec::ParamPut _in_[1] =
   {
      { CORBA::_tc_OctetSeq, (CF::OctetSeq*) &pkt, CORBA::PARAM_IN }
   };

   invoke_request (_md_, _in_, 0 EORB_ENV_VARN);
}

Data::EncryptedData_ptr Data::EncryptedData::_duplicate (Data::EncryptedData_ptr p)
{
   if (p) p->m_count++;
   return p;
}

CORBA::Boolean Data::EncryptedData::_is_a (const char * _id)
{
   if (strcmp (_id, this->_repository_id ()) == 0)
   {
      return true;
   }

   return false;
}

Data::EncryptedData_ptr Data::EncryptedData::_narrow (CORBA::Object_ptr p EORB_ENV_ARGN)
{
   Data::EncryptedData_ptr result = 0;
   if (p && p->_is_a (_repository_id () EORB_ENV_VARN))
   {
      result = new EncryptedData_stub (p);
   }
   return result;
}

Data::EncryptedData_ptr Data::EncryptedData::_unchecked_narrow (CORBA::Object_ptr p)
{
   Data::EncryptedData_ptr result = 0;
   result = new EncryptedData_stub (p);
   return result;
}

void Data::EncryptedData::_assert_stub (EncryptedData_ptr & obj )
{
   if (CORBA::is_nil (obj)) obj = new EncryptedData_stub ();
}

Data::EncryptedData_stub::EncryptedData_stub (IOP::IOR_ptr ior) :
   CORBA::Object (ior)
{
}

Data::EncryptedData_stub::EncryptedData_stub (CORBA::Object_ptr p) :
   CORBA::Object (*p)
{
}


void 
Data::MhalData_stub::pushMhalData (const ::CF::OctetSeq& pkt EORB_ENV_ARGN)
{
   static const EORB::OpMeta _md_ ("pushMhalData", 0, 2136448291u, 13u, 1u, 0u, 0u);
   EORB::Codec::ParamPut _in_[1] =
   {
      { CORBA::_tc_OctetSeq, (CF::OctetSeq*) &pkt, CORBA::PARAM_IN }
   };

   invoke_request (_md_, _in_, 0 EORB_ENV_VARN);
}

Data::MhalData_ptr Data::MhalData::_duplicate (Data::MhalData_ptr p)
{
   if (p) p->m_count++;
   return p;
}

CORBA::Boolean Data::MhalData::_is_a (const char * _id)
{
   if (strcmp (_id, this->_repository_id ()) == 0)
   {
      return true;
   }

   return false;
}

Data::MhalData_ptr Data::MhalData::_narrow (CORBA::Object_ptr p EORB_ENV_ARGN)
{
   Data::MhalData_ptr result = 0;
   if (p && p->_is_a (_repository_id () EORB_ENV_VARN))
   {
      result = new MhalData_stub (p);
   }
   return result;
}

Data::MhalData_ptr Data::MhalData::_unchecked_narrow (CORBA::Object_ptr p)
{
   Data::MhalData_ptr result = 0;
   result = new MhalData_stub (p);
   return result;
}

void Data::MhalData::_assert_stub (MhalData_ptr & obj )
{
   if (CORBA::is_nil (obj)) obj = new MhalData_stub ();
}

Data::MhalData_stub::MhalData_stub (IOP::IOR_ptr ior) :
   CORBA::Object (ior)
{
}

Data::MhalData_stub::MhalData_stub (CORBA::Object_ptr p) :
   CORBA::Object (*p)
{
}



static void * Data_ProcessedData_ctor ()
{
   return (CORBA::Object_ptr) new Data::ProcessedData_stub ();
}

static void Data_ProcessedData_dtor (void * arg)
{
   CORBA::release ((CORBA::Object_ptr) arg);
}

static void Data_ProcessedData_copy (void * dest, void * src)
{
   ((CORBA::Object_ptr)dest)->set_ior (((CORBA::Object_ptr)src)->get_ior ());
}

CORBA::TypeCode_ptr Data::_tc_ProcessedData;

static void * Data_OpenData_ctor ()
{
   return (CORBA::Object_ptr) new Data::OpenData_stub ();
}

static void Data_OpenData_dtor (void * arg)
{
   CORBA::release ((CORBA::Object_ptr) arg);
}

static void Data_OpenData_copy (void * dest, void * src)
{
   ((CORBA::Object_ptr)dest)->set_ior (((CORBA::Object_ptr)src)->get_ior ());
}

CORBA::TypeCode_ptr Data::_tc_OpenData;

static void * Data_EncryptedData_ctor ()
{
   return (CORBA::Object_ptr) new Data::EncryptedData_stub ();
}

static void Data_EncryptedData_dtor (void * arg)
{
   CORBA::release ((CORBA::Object_ptr) arg);
}

static void Data_EncryptedData_copy (void * dest, void * src)
{
   ((CORBA::Object_ptr)dest)->set_ior (((CORBA::Object_ptr)src)->get_ior ());
}

CORBA::TypeCode_ptr Data::_tc_EncryptedData;

static void * Data_MhalData_ctor ()
{
   return (CORBA::Object_ptr) new Data::MhalData_stub ();
}

static void Data_MhalData_dtor (void * arg)
{
   CORBA::release ((CORBA::Object_ptr) arg);
}

static void Data_MhalData_copy (void * dest, void * src)
{
   ((CORBA::Object_ptr)dest)->set_ior (((CORBA::Object_ptr)src)->get_ior ());
}

CORBA::TypeCode_ptr Data::_tc_MhalData;

class DataFile_plugin : public EORB::TCPlugin
{
public:

   DataFile_plugin () { EORB::TCManager::manager().add (this); };

   virtual void init (EORB_ENV_ARG1)
   {
      Data::_tc_ProcessedData = CORBA::TypeCode::build_typecode
      (
         CORBA::tk_objref,
         Data_ProcessedData_ctor,
         Data_ProcessedData_dtor,
         (CORBA::TypeCode::PutFunc) 0,
         (CORBA::TypeCode::GetFunc) 0,
         Data_ProcessedData_copy,
         0, 0, 0,
         0,
         0, false
      );
      Data::_tc_OpenData = CORBA::TypeCode::build_typecode
      (
         CORBA::tk_objref,
         Data_OpenData_ctor,
         Data_OpenData_dtor,
         (CORBA::TypeCode::PutFunc) 0,
         (CORBA::TypeCode::GetFunc) 0,
         Data_OpenData_copy,
         0, 0, 0,
         0,
         0, false
      );
      Data::_tc_EncryptedData = CORBA::TypeCode::build_typecode
      (
         CORBA::tk_objref,
         Data_EncryptedData_ctor,
         Data_EncryptedData_dtor,
         (CORBA::TypeCode::PutFunc) 0,
         (CORBA::TypeCode::GetFunc) 0,
         Data_EncryptedData_copy,
         0, 0, 0,
         0,
         0, false
      );
      Data::_tc_MhalData = CORBA::TypeCode::build_typecode
      (
         CORBA::tk_objref,
         Data_MhalData_ctor,
         Data_MhalData_dtor,
         (CORBA::TypeCode::PutFunc) 0,
         (CORBA::TypeCode::GetFunc) 0,
         Data_MhalData_copy,
         0, 0, 0,
         0,
         0, false
      );
   }

   virtual ~DataFile_plugin ()
   {
      CORBA::release (Data::_tc_ProcessedData);
      CORBA::release (Data::_tc_OpenData);
      CORBA::release (Data::_tc_EncryptedData);
      CORBA::release (Data::_tc_MhalData);
   }
};

static DataFile_plugin eorbDataFile_plugin;

