//******************************************************************
// 
//  Generated by e*ORB IDL to C++ Translator
//  
//  File name: DataFile_s.cpp
//  Source: DataFile.idl
//  Generated: Fri Feb 05 11:36:55 2021
//  eORB C++ V2.1.9
//  
//******************************************************************
#include "DataFile_s.h"

const char * POA_Data::ProcessedData::_repository_id () const
{
   return (const char*) "IDL:Data/ProcessedData:1.0";
}

Data::ProcessedData_ptr POA_Data::ProcessedData::_this (EORB_ENV_ARG1)
{
   CORBA::Object_var obj (_this_ (EORB_ENV_VAR1));
   return (Data::ProcessedData::_narrow (obj.in () EORB_ENV_VARN));
}

CORBA::Boolean POA_Data::ProcessedData::_is_a (const char * _id)
{
   if (strcmp (_id, "IDL:Data/ProcessedData:1.0") == 0)
   {
      return true;
   }

   return false;
}

void POA_Data::ProcessedData::_dispatch_pushProcessedData
(
   void * _servant_,
   EORB::Codec::Request & _request_
   EORB_ENV_ARGN
)
{
   POA_Data::ProcessedData * _srv_ = (POA_Data::ProcessedData*) _servant_;
   CF::OctetSeq pkt;

   EORB::Codec::ParamGet _out_[1] =
   {
      { CORBA::_tc_OctetSeq, &pkt, CORBA::PARAM_IN }
   };
   _request_.get_args (_out_, 1UL);

   _srv_->pushProcessedData (*(CF::OctetSeq*)_out_[0].m_value EORB_ENV_VARN);
   EORB_CHECK_ENV_RETURN_VOID;

   if (_request_.reply_expected ())
   {
      _request_.put_args (0, 0UL);
      _request_.send_reply ();
   }
}

EORB::Codec::DispatchFN POA_Data::ProcessedData::_invoke (EORB::Codec::Request & _req EORB_ENV_ARGN)
{
   void * ptr = this;
   EORB::Codec::DispatchFN disp = (EORB::Codec::DispatchFN) 0;

   disp = POA_Data::ProcessedData::_dispatch_pushProcessedData;
   (*disp) (ptr, _req EORB_ENV_VARN);
   return disp;
}

const char * POA_Data::OpenData::_repository_id () const
{
   return (const char*) "IDL:Data/OpenData:1.0";
}

Data::OpenData_ptr POA_Data::OpenData::_this (EORB_ENV_ARG1)
{
   CORBA::Object_var obj (_this_ (EORB_ENV_VAR1));
   return (Data::OpenData::_narrow (obj.in () EORB_ENV_VARN));
}

CORBA::Boolean POA_Data::OpenData::_is_a (const char * _id)
{
   if (strcmp (_id, "IDL:Data/OpenData:1.0") == 0)
   {
      return true;
   }

   return false;
}

void POA_Data::OpenData::_dispatch_pushOpenData
(
   void * _servant_,
   EORB::Codec::Request & _request_
   EORB_ENV_ARGN
)
{
   POA_Data::OpenData * _srv_ = (POA_Data::OpenData*) _servant_;
   CF::OctetSeq pkt;

   EORB::Codec::ParamGet _out_[1] =
   {
      { CORBA::_tc_OctetSeq, &pkt, CORBA::PARAM_IN }
   };
   _request_.get_args (_out_, 1UL);

   _srv_->pushOpenData (*(CF::OctetSeq*)_out_[0].m_value EORB_ENV_VARN);
   EORB_CHECK_ENV_RETURN_VOID;

   if (_request_.reply_expected ())
   {
      _request_.put_args (0, 0UL);
      _request_.send_reply ();
   }
}

EORB::Codec::DispatchFN POA_Data::OpenData::_invoke (EORB::Codec::Request & _req EORB_ENV_ARGN)
{
   void * ptr = this;
   EORB::Codec::DispatchFN disp = (EORB::Codec::DispatchFN) 0;

   disp = POA_Data::OpenData::_dispatch_pushOpenData;
   (*disp) (ptr, _req EORB_ENV_VARN);
   return disp;
}

const char * POA_Data::EncryptedData::_repository_id () const
{
   return (const char*) "IDL:Data/EncryptedData:1.0";
}

Data::EncryptedData_ptr POA_Data::EncryptedData::_this (EORB_ENV_ARG1)
{
   CORBA::Object_var obj (_this_ (EORB_ENV_VAR1));
   return (Data::EncryptedData::_narrow (obj.in () EORB_ENV_VARN));
}

CORBA::Boolean POA_Data::EncryptedData::_is_a (const char * _id)
{
   if (strcmp (_id, "IDL:Data/EncryptedData:1.0") == 0)
   {
      return true;
   }

   return false;
}

void POA_Data::EncryptedData::_dispatch_pushEncryptedData
(
   void * _servant_,
   EORB::Codec::Request & _request_
   EORB_ENV_ARGN
)
{
   POA_Data::EncryptedData * _srv_ = (POA_Data::EncryptedData*) _servant_;
   CF::OctetSeq pkt;

   EORB::Codec::ParamGet _out_[1] =
   {
      { CORBA::_tc_OctetSeq, &pkt, CORBA::PARAM_IN }
   };
   _request_.get_args (_out_, 1UL);

   _srv_->pushEncryptedData (*(CF::OctetSeq*)_out_[0].m_value EORB_ENV_VARN);
   EORB_CHECK_ENV_RETURN_VOID;

   if (_request_.reply_expected ())
   {
      _request_.put_args (0, 0UL);
      _request_.send_reply ();
   }
}

EORB::Codec::DispatchFN POA_Data::EncryptedData::_invoke (EORB::Codec::Request & _req EORB_ENV_ARGN)
{
   void * ptr = this;
   EORB::Codec::DispatchFN disp = (EORB::Codec::DispatchFN) 0;

   disp = POA_Data::EncryptedData::_dispatch_pushEncryptedData;
   (*disp) (ptr, _req EORB_ENV_VARN);
   return disp;
}

const char * POA_Data::MhalData::_repository_id () const
{
   return (const char*) "IDL:Data/MhalData:1.0";
}

Data::MhalData_ptr POA_Data::MhalData::_this (EORB_ENV_ARG1)
{
   CORBA::Object_var obj (_this_ (EORB_ENV_VAR1));
   return (Data::MhalData::_narrow (obj.in () EORB_ENV_VARN));
}

CORBA::Boolean POA_Data::MhalData::_is_a (const char * _id)
{
   if (strcmp (_id, "IDL:Data/MhalData:1.0") == 0)
   {
      return true;
   }

   return false;
}

void POA_Data::MhalData::_dispatch_pushMhalData
(
   void * _servant_,
   EORB::Codec::Request & _request_
   EORB_ENV_ARGN
)
{
   POA_Data::MhalData * _srv_ = (POA_Data::MhalData*) _servant_;
   CF::OctetSeq pkt;

   EORB::Codec::ParamGet _out_[1] =
   {
      { CORBA::_tc_OctetSeq, &pkt, CORBA::PARAM_IN }
   };
   _request_.get_args (_out_, 1UL);

   _srv_->pushMhalData (*(CF::OctetSeq*)_out_[0].m_value EORB_ENV_VARN);
   EORB_CHECK_ENV_RETURN_VOID;

   if (_request_.reply_expected ())
   {
      _request_.put_args (0, 0UL);
      _request_.send_reply ();
   }
}

EORB::Codec::DispatchFN POA_Data::MhalData::_invoke (EORB::Codec::Request & _req EORB_ENV_ARGN)
{
   void * ptr = this;
   EORB::Codec::DispatchFN disp = (EORB::Codec::DispatchFN) 0;

   disp = POA_Data::MhalData::_dispatch_pushMhalData;
   (*disp) (ptr, _req EORB_ENV_VARN);
   return disp;
}



